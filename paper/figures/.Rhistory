?formatC
-mean(rank.Fr[c(1:(K-1)),1])
n<-order(a); rank.Fr[i,]<-n;
rank.Fr[i,]<-n;
rank.Fr<-data.frame(matrix(0, ncol = K, nrow = N+1)); rownames(rank.Fr)=c("ml", "ts1", "tc50", "tc90", "mh", "avg ranking"); colnames(rank.Fr)=c("svm non linear", "MLP 3", "linear reg.", "linear reg. + PCA");
for (i in 1:N){
a<-vector(); a<-data.m[i,];
n<-order(a); rank.Fr[i,]<-n;
}
-mean(rank.Fr[c(1:(K-1)),1])
mean(rank.Fr[c(1:(K-1)),1])
mean(rank.Fr[c(1:(K-1)),2])
rank.Fr[c(1:]
Ff
source('~/.active-rstudio-document', echo=TRUE)
F
Ff
result.f$statistic
df.sd.errors.raw
df.sd.errors.raw[4,]
mean.error[[1]][1,2]
mean.error[[1]][,2]
mean.error[[1]]
mean.error
df.mean.errors.pca
?train
library(AMORE)
?train
load("/Users/ruurraca/Library/Caches/TemporaryItems/FINAL_RESULTS NO_RFE_PCA .RData")
mezclas.ml.lm
mezclas.ml.glm
clc
rm
rm<-ls(all)
rm(list=ls())
load("/Users/ruurraca/Library/Caches/TemporaryItems/FINAL_RESULTS NO_RFE_RAW .RData")
load("/Users/ruurraca/Library/Caches/TemporaryItems/FINAL_RESULTS RFE_PCA .RData")
install.packages("lhs")
library("lhs", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
?intall.package
?install.package
?install.packages
?searc
?search
a<-c(1:3,2,3)
a
?matrix
a<-matrix(1:10,2,5)
a
y<-(1:5)
x<-c(1:5)
y<-c(1:5)
x
y
rbind(x,y)
x<-4
class(X)
class(x)
x <- list(2, "a", "b", TRUE)
a<-x[[2]]
class(a)
a
x <- list(2, "a", "b", TRUE)
a<-x[[2]]
a
a<-x[[2]]
a<-x[[2]]
a<-x[[2]]
a
x<-1:4
y<-2:3
x+y
class(x+y)
class(x)
?rnorm
?rpois
?quantile
?array
x <- 1:10
if(x > 5) {
x <- 0
}
> if(x > 5) {
+     x <- 0
+ }
> if(x > 5) {
+     x <- 0
+ }
x <- 1:10
if(x > 5) {
x <- 0
}
if(x > 5) {
x <- 0
}
library(datasets)
data(iris)
?iris
iris
split(iris, iris$Species)
s<-split(iris, iris$Species)
s$virgnica
fix(s)
s[[1]]
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris, 2, mean)
apply(iris[,1:4], 2, mean)
library(datasets)
data(mtcars)
mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
?mtcars
tapply(mtcars$hp, mtcars$cyl, mean)
hpAVG<-tapply(mtcars$hp, mtcars$cyl, mean)
abs(hpAVG[[1]]-hpAVG[[3]])
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
debug(ls)
?debug
directory<-/Users/ruurraca/Documents/6_ONLINE_COURSES/2013_computing_for_data_analysis/week2/specdata
directory<-"/Users/ruurraca/Documents/6_ONLINE_COURSES/2013_computing_for_data_analysis/week2/specdata"
?colorRamp
?colorRampPalette
?colorRampPalette
?topo.colors
?color
?colors
?rgb
rgb(0,1,0)
setOldClass()
?setOldClass()
vignette("fileio")
install.packages("hyperSpec")
library(hyperSpec)
library(hyperSpec)
chondro
summary(chondro)
chondro$spec
chondro@data
chondro@data$spc
chondro@data$x
chondro@data$y
plot(chondro)
chondro@data$clusters
chondro@wavelength
chondro@label
chondro@log
chondro[[1]]}
chondro[[]]}
chondro[[]]
chondro[[1]]
chondro[[1]]
chondro[[1,2]]
chondro[[1,,3]]
chondro[[1,,1622]]
chondro[[1,,4]]
chondro[[1,2,1622]]
chondro[1,3]
chondro$.
chondro$..
chondro[1:3]
chrono@data$spc[1]
chondro@data$spc[1]
chondro@data$spc
chondro@data$spc[1,]
a<-chondro@data$spc[1,]
a
?hyperSpec
summary(flu)
flu@data
flu@data$c
?flu
flu
flu@label
q()
.panelContainer {
width: 550px;
-   height: 460px;
+   height: 545px;
}
.sshKeyWidget {
.panelContainer {
width: 550px;
-   height: 460px;
+   height: 545px;
}
.panelContainer {
width: 550px;
-   height: 460px;
+   height: 545px;
}
@external gwt-CheckBox;
.panelContainer {
width: 550px;
height: 545px;
}
.sshKeyWidget {
margin-top: 20px;
}
.usingVcsHelp {
margin-top: 30px;
}
.newSection {
margin-top: 25px;
}
.paneLayoutTable td.paneLayoutTable {
background-color: white;
height: 195px;
vertical-align: top;
-moz-border-radius: 6px;
-webkit-border-radius: 6px;
border-radius: 6px;
}
.paneLayoutTable .gwt-CheckBox {
display: block;
margin: 0 0 0 8px;
max-height: 18px;
font-size: 11px;
}
.paneLayoutTable select {
width: 195px;
margin-bottom: 5px;
}
.themeChooser select {
width: 148px;
}
install.packages(c("class", "foreign", "lattice", "MASS", "Matrix", "mgcv", "mvtnorm", "nlme", "nnet", "R.matlab", "R.methodsS3", "R.oo", "R.utils", "rpart", "spatial"))
?variogram
library(gstat)
library(sp)
?variogram
library(prospectr)
?msc
library(pls)
?msc
320/(8*5)
320/(5)
320/(5)
110/(8*5)
y<-1:1:10
y
?wiclox
Cargas <- c(0,10,20,30,40,50)
Test1 <- c(0,-0.65,-1.25,-1.87,-2.47,-3.08)
Test2 <- c(0,-0.62,-1.24,-1.79,-2.37,-2.96)
J3003 <- c(0,-5.40E-01,-1.08000,-1.62,-2.16,-2.7)
plot(Cargas,Test1, pch=5, col=2, xlab="",ylab="",cex=0.7)
lines(Cargas,Test1,col="red")
par(new=TRUE)
plot(Cargas,Test2,col=3,xlab="",ylab="",axes=FALSE,cex=0.7)
lines(Cargas,Test2,col="blue")
par(new=TRUE)
plot(Cargas,J3003,col=4,xlab="",ylab="",axes=FALSE,cex=0.7)
lines(Cargas,J3003,col="green")
horizontal<-0:1:50
?seq
horizontal<-seq(0,50,5)
plot(Cargas,Test1, pch=5, col=2, xlab="",ylab="",cex=0.7)
lines(Cargas,Test1,col="red")
par(new=TRUE)
plot(Cargas,Test2,col=3,xlab="",ylab="",axes=FALSE,cex=0.7)
lines(Cargas,Test2,col="blue")
par(new=TRUE)
vertical<-seq(-3,0,0.5)
?xaxt
plot(Cargas,Test1, type="l", col="red" pch=5, col=2, xlab="",ylab="",cex=0.7)
lines(Cargas,Test2,col="blue")
lines(Cargas, J3003, col="green")
legend("topright",c("Test1","Test2","J3003"),lty=1,col=c(2:4),cex=0.7)
title(main="Displacements",xlab="Charges",ylab="Displacements",cex=0.7)
horizontal<-seq(0,50,5)
vertical<-seq(-3,0,0.5)
plot(Cargas,Test1, type="l", col="red", ,xaxt="n",yaxt="n",ann=FALSE, xlab="",ylab="",cex=0.7)
axis(side = 1, at=horizontal)
axis(side = 2, at=vertical,las=1)
mtext(side = 1, text = "Charges", line = 3)
mtext(side = 2, text = "Displacements", line = 5)
lines(Cargas,Test2,col="blue")
#creamos dos vectores con nuestros ticks
horizontal<-seq(0,50,5)
vertical<-seq(-3,0,0.5)
plot(Cargas,Test1, type="l", col="red", ,xaxt="n",yaxt="n",ann=FALSE, xlab="",ylab="",cex=0.7, main="Displacements")
axis(side = 1, at=horizontal)
axis(side = 2, at=vertical,las=1)
mtext(side = 1, text = "Charges", line = 3)
mtext(side = 2, text = "Displacements", line = 5)
lines(Cargas,Test2,col="blue")
lines(Cargas, J3003, col="green")
abline( h=vertical,v=horizontal, col="#E0E0E0", lwd=1)
legend("topright",c("Test1","Test2","J3003"),lty=1,col=c(2:4),cex=0.7)
62/2.5
63/2.5
d<-69.3
37/60
t<-3.62
d/t
34รงรง760
t<-3+34/60
d/t
1900*14
axis
?las
?axis
140/300
60/160
150/380
100/250
130/300
55/147
33/124
30*9
/8
270/8
9*30
20*30
48.5-23.5
75/0.785
75/0.885
50/1.75
5/60
5/60+2
0/2.0833333
50/2.0833333
citation("stats")
source('~/Dropbox/softcomp/estimation/_database/editDB_local.R', echo=TRUE)
colnames(meteo.test[[1]])
colnames(meteo.test[[1]])
colnames(meteo.test[[1]])
colnames(meteo.test[[16]])
############################################################################################################################
############################################################################################################################
############################################################################################################################
rm(list=ls(all=TRUE))
setwd("~/Dropbox/softcomp/estimation/")
dir<-getwd()
load("SVRgeneral.RData")
############################################################################################################################
#load meteo database in order to add the station and the date.
setwd(paste0(dir,"/_database/"))
load("meteo.RData")
############################################################################################################################
############################################################################################################################
############################################################################################################################
rm(list=ls(all=TRUE))
setwd("~/Dropbox/softcomp/estimation/")
dir<-getwd()
load("SVRgeneral.RData")
############################################################################################################################
#load meteo database in order to add the station and the date.
setwd(paste0(dir,"/_database/"))
load("meteo.RData")
dir()
############################################################################################################################
############################################################################################################################
############################################################################################################################
rm(list=ls(all=TRUE))
setwd("~/Dropbox/softcomp/estimation/")
dir<-getwd()
load("SVRgeneral.RData")
############################################################################################################################
############################################################################################################################
############################################################################################################################
rm(list=ls(all=TRUE))
setwd("~/Dropbox/softcomp/estimation/")
dir<-getwd()
load("SVRgeneral.RData")
rm(list=ls(all=TRUE))
setwd("~/Dropbox/softcomp/estimation/")
dir<-getwd()
load("generalResults.RData")
############################################################################################################################
#load meteo database in order to add the station and the date.
setwd(paste0(dir,"/_database/"))
dir()
load("general_normalized.RData")
resrel<-100*(realtest-predtest)/realtest#residuo relativo
res<-data.frame("date"=as.Date(meteo.test$Date, format="%d/%m/%Y"), "station"=as.factor(st_test),"res"=resrel, "real"=realtest, "pred"=predtest)
res<-res[order(res$date),]
resrel<-100*(realtest-predtest)/realtest#residuo relativo
res<-data.frame("date"=as.Date(meteo.test$Date, format="%d/%m/%Y"), "station"=as.factor(st_test),"res"=resrel, "real"=realtest, "pred"=predtest)
load("meteo.RData")
res<-data.frame("date"=as.Date(meteo.test$Date, format="%d/%m/%Y"), "station"=as.factor(st_test),"res"=resrel, "real"=realtest, "pred"=predtest)
############################################################################################################################
#load meteo database in order to add the station and the date.
setwd(paste0(dir,"/_database/"))
load("meteo.RData")
############################################################################################################################
#bind the list (stations) into a global dataframe and add a station column
for (i in 1:16){
meteo[[i]]$station<-rep(i, nrow(meteo[[i]]))
}
aux<-meteo[[1]]
for (i in 2:16){
aux<-rbind(aux,meteo[[i]])
}
meteo<-aux
#########################################################################################################################
#split train-test. Test set = year 2013
trainSet<-function(dframe_orig){
dframe_train<-dframe_orig[dframe_orig$Year!=2013,]
return(dframe_train)
}
testSet<-function(dframe_orig){
dframe_test<-dframe_orig[dframe_orig$Year==2013,]
return(dframe_test)
}
meteo.train<-trainSet(meteo)
meteo.test<-testSet(meteo)#year 2013
resrel<-100*(realtest-predtest)/realtest#residuo relativo
res<-data.frame("date"=as.Date(meteo.test$Date, format="%d/%m/%Y"), "station"=as.factor(st_test),"res"=resrel, "real"=realtest, "pred"=predtest)
res<-res[order(res$date),]
all<-seq(as.Date("0013-01-01"),as.Date("0013-12-31"), by="+1 day")
res2<-as.data.frame(matrix("NA",ncol=2,nrow=365*16))
colnames(res2)<-c("date", "station")
res2$date<-rep(all,16)
res2$station<-rep(1:16, each=365)
res.split<-split(res,res$station)
res2.split<-split(res2,res2$station)
res.split<-lapply(1:16, function(i){read.zoo(res.split[[i]],format="%Y-%m-%d")})
res2.split<-lapply(1:16, function(i){read.zoo(res2.split[[i]],format="%Y-%m-%d")})
res.split<-lapply(1:16, function(i){merge.zoo(res.split[[i]],res2.split[[i]], all=TRUE)})
res.split<-lapply(1:16, function(i){res.split[[i]]<-res.split[[i]][,-1]})
for (i in 1:16){
colnames(res.split[[i]])[4]<-"station"
}
zoo.to.data.frame <- function(x, index.name="Date") {
stopifnot(is.zoo(x))
xn <- if(is.null(dim(x))) deparse(substitute(x)) else colnames(x)
setNames(data.frame(index(x), x, row.names=NULL), c(index.name,xn))
}
res.split<-lapply(1:16, function(i){res.split[[i]]<-zoo.to.data.frame(res.split[[i]])})
res<-do.call(rbind,res.split)
res$Date<-as.Date(res$Date, format="%Y%m%d")
res$res<-as.numeric(as.character(res$res))
res$pred<-as.numeric(as.character(res$pred))
res$real<-as.numeric(as.character(res$real))
colnames(res)[5]<-"station"
res$station<-as.factor(res$station)
res<-data.frame("date"=as.Date(meteo.test$Date, format="%d/%m/%Y"), "station"=as.factor(st_test),"res"=resrel, "real"=realtest, "pred"=predtest)
res<-res[order(res$date),]
all<-seq(as.Date("0013-01-01"),as.Date("0013-12-31"), by="+1 day")
res2<-as.data.frame(matrix("NA",ncol=2,nrow=365*16))
colnames(res2)<-c("date", "station")
res2$date<-rep(all,16)
res2$station<-rep(1:16, each=365)
res.split<-split(res,res$station)
res2.split<-split(res2,res2$station)
res.split<-lapply(1:16, function(i){read.zoo(res.split[[i]],format="%Y-%m-%d")})
library(zoo)
res.split<-lapply(1:16, function(i){read.zoo(res.split[[i]],format="%Y-%m-%d")})
res2.split<-lapply(1:16, function(i){read.zoo(res2.split[[i]],format="%Y-%m-%d")})
res.split<-lapply(1:16, function(i){merge.zoo(res.split[[i]],res2.split[[i]], all=TRUE)})
res.split<-lapply(1:16, function(i){res.split[[i]]<-res.split[[i]][,-1]})
for (i in 1:16){
colnames(res.split[[i]])[4]<-"station"
}
zoo.to.data.frame <- function(x, index.name="Date") {
stopifnot(is.zoo(x))
xn <- if(is.null(dim(x))) deparse(substitute(x)) else colnames(x)
setNames(data.frame(index(x), x, row.names=NULL), c(index.name,xn))
}
res.split<-lapply(1:16, function(i){res.split[[i]]<-zoo.to.data.frame(res.split[[i]])})
res<-do.call(rbind,res.split)
res$Date<-as.Date(res$Date, format="%Y%m%d")
res$res<-as.numeric(as.character(res$res))
res$pred<-as.numeric(as.character(res$pred))
res$real<-as.numeric(as.character(res$real))
colnames(res)[5]<-"station"
res$station<-as.factor(res$station)
under_five<-tapply(res$res, res$station, function(x){100*length(which(x<5))/(length(x))})
under_five<-as.vector(round(under_five,2))
mbe<-tapply(res$real-res$pred, res$station, mean, na.rm=TRUE)
library(lattice)
library(latticeExtra)
library(rasterVis)
library(grid)
setwd("~/Dropbox/softcomp/paper_estimation/figures")
trellis.device(pdf, file='residuals.pdf')
xyplot(res$res~res$Date|res$station, superpose=TRUE, col="midnightblue", lwd=0.7, alpha=0.5, type="l",
ylab="Relative residuals", xlab="Date", layout=c(4,4), auto.key=FALSE, aspect=0.8, ylim=c(-50,50),
index.cond=list(c(13:16,9:12,5:8,1:4)),
par.settings = list(strip.background=list(col="deepskyblue")),
panel=function(x, y, ...){
panel.xyplot(x, y, ...)
# panel.abline(h=0,col="gray",alpha=0.3)
panel.abline(h=c(-5,5),col="black",alpha=0.3)
grid.text(label=paste(under_five[panel.number()],"%",sep=" "), .66, .9, just='left', gp=gpar(cex=0.7, col='black'))
grid.text(label=paste0("mbe = ",round(mbe[panel.number()], digits=2)), .05, .9, just='left', gp=gpar(cex=0.7, col='black'))
})
dev.off()
trellis.device(pdf, file='real_pred.pdf')
xyplot(res$real~res$pred|res$station, superpose=TRUE, col="midnightblue", lwd=1, alpha=0.3, type="p", cex=0.5,
pch=20, xlab="Estimated irradiation", ylab="Real irradiation", layout=c(4,4), auto.key=FALSE, aspect=0.8,
index.cond=list(c(13:16,9:12,5:8,1:4)), ylim=c(0,35), xlim=c(0,35),
#  key=list(text=list(c("diagonal", "model"), cex=0.8), lines=list(lwd=2., span=0.5, col=c("red", "black"))),
par.settings = list(strip.background=list(col="deepskyblue")),
panel=function(x, y, ...){
panel.xyplot(x, y, ...)
lmLine <- lm(y ~ x)
r2<-round(summary(lmLine)$r.squared, 2)
grid.text(paste('Rยฒ=', r2), .03, .9, just='left', gp=gpar(cex=0.7, col='black'))
panel.abline(lmLine, col='black',lwd=1.3)
panel.abline(a=0, b=1, col="red")
})
dev.off()
