print(f_E50pe)
#Calculo 2: Traccion
t_g31 <- (a_3 - a_1) / a_3
t_g1  <- a_1 / a_3
t_w   <- f_m / E_05
t_sc3 <- k_a * E_05 * f_w
t_sc1 <- k_a * E_05 * f_w
t_E05pa<- E_05 * t_g31
t_E05pe<- E_05 * t_g1
t_E50pa<- E_50 * t_g31
t_E50pe<- E_50 * t_g1
t_fpa  <- t_sc3 * t_g31
t_fpe  <- t_sc1 * t_g1 * mu
print("Estos son los de Traccion")
print(t_E05pa)
print(t_E05pe)
print(t_E50pa)
print(t_E50pe)
#Calculo 3: Compresion
c_g31<-function(a,b)
{((a)-(b))/(a)}
c_g1<-function(a,b)
{a/b}
c_w<-function(a,b)
{a/b}
c_sc<-function(a,b,c)
{a*b*c}
c_fpa<-function(a,b)
{a*b}
c_fpe<-function(a,b,c)
{a*b*c}
c_g31 <-(a_3 - a_1) / a_3
c_g1  <-a_1 / a_3
c_w   <-f_c / E_05
c_sc3 <-k_a * E_05 *c_w
c_sc1 <-k_a * E_05 *c_w
c_E05pa<- E_05 * c_g31
c_E05pe<- E_05 *c_g1
c_E50pa<- E_50 * c_g31
c_E50pe<- E_50 * c_g1
c_fpa  <- c_sc3 * c_g31
c_fpe  <- c_sc1 * c_g1 * mu
print("Estos son los de Compresion")
print(c_E05pa)
print(c_E05pe)
print(c_E50pa)
print(c_E50pe)
}
A <- data.frame(f_E05pa, f_E05pe, f_E50pa, f_E50pe,
t_E05pa, t_E05pe, t_E50pa, t_E50pe,
c_E05pa, c_E05pe, c_E50pa, c_E50pe)
}
A <-resultado(6000, 9000, 20, 30, 1, 3, 1, 3, 1)
View(A)
is(A)
View(A)
resultado <- function (E_05, E_50, f_m, f_c, k_a, n, c_1, c_2, c_3, c_4, c_5, c_6, c_7, c_8, c_9, c_10, c_11, c_12, c_13)
{
#Definición de los valores de entrada
#E_05 <- 6000  # N/mm2
#E_50 <- 9000  # N/mm2
#f_m <- 20     # N/mm2
#f_c <- 30     # N/mm2
#k_a <- 1      # -
# Espesores de las chapas de plywood [mm]
#c_1 <- 1
#c_2 <- 3
#c_3 <- 1
# Numero de capas en el plywood
#n <- 3
##Caso 1: Tres capas
if(n==3)
{
# Datos generales de 3 capas
a_3 <- c_1 + c_2 + c_3
a_1 <- c_2
mu  <- a_3/a_1
# Calculo 1: Flexion
f_g31 <- ((a_3^3)-(a_1^3))/(a_3^3)
f_g1  <- a_1^3 / a_3^3
f_w   <- f_m / E_05
f_sc3 <- k_a * E_05 * (a_3 / a_3) * f_w
f_sc1 <- k_a * E_05 * (a_1 / a_3) * f_w
f_E05pa<-E_05 * f_g31
f_E05pe<-E_05 * f_g1
f_E50pa<-E_50 * f_g31
f_E50pe<-E_50 * f_g1
f_fpa<-f_sc3 * f_g31
f_fpe<-f_sc1 * f_g1 *mu
print("Estos son los de Flexion")
print(f_E05pa)
print(f_E05pe)
print(f_E50pa)
print(f_E50pe)
#Calculo 2: Traccion
t_g31 <- (a_3 - a_1) / a_3
t_g1  <- a_1 / a_3
t_w   <- f_m / E_05
t_sc3 <- k_a * E_05 * f_w
t_sc1 <- k_a * E_05 * f_w
t_E05pa<- E_05 * t_g31
t_E05pe<- E_05 * t_g1
t_E50pa<- E_50 * t_g31
t_E50pe<- E_50 * t_g1
t_fpa  <- t_sc3 * t_g31
t_fpe  <- t_sc1 * t_g1 * mu
print("Estos son los de Traccion")
print(t_E05pa)
print(t_E05pe)
print(t_E50pa)
print(t_E50pe)
#Calculo 3: Compresion
c_g31<-function(a,b)
{((a)-(b))/(a)}
c_g1<-function(a,b)
{a/b}
c_w<-function(a,b)
{a/b}
c_sc<-function(a,b,c)
{a*b*c}
c_fpa<-function(a,b)
{a*b}
c_fpe<-function(a,b,c)
{a*b*c}
c_g31 <-(a_3 - a_1) / a_3
c_g1  <-a_1 / a_3
c_w   <-f_c / E_05
c_sc3 <-k_a * E_05 *c_w
c_sc1 <-k_a * E_05 *c_w
c_E05pa<- E_05 * c_g31
c_E05pe<- E_05 *c_g1
c_E50pa<- E_50 * c_g31
c_E50pe<- E_50 * c_g1
c_fpa  <- c_sc3 * c_g31
c_fpe  <- c_sc1 * c_g1 * mu
print("Estos son los de Compresion")
print(c_E05pa)
print(c_E05pe)
print(c_E50pa)
print(c_E50pe)
}
A <- data.frame(f_E05pa, f_E05pe, f_E50pa, f_E50pe,
t_E05pa, t_E05pe, t_E50pa, t_E50pe,
c_E05pa, c_E05pe, c_E50pa, c_E50pe)
}
A <-resultado(6000, 9000, 20, 30, 1, 3, 1, 3, 1)
View(A)
A <-resultado(6000, 9000, 20, 30, 1, 3, 1, 3, 1)
View(A)
A <-resultado(6000, 9000, 20, 30, 1, 3, 1, 3, 1,3,3,3,3)
normaUNE <- function (E_05, E_50, f_m, f_c, k_a, n, c_1, c_2, c_3, c_4, c_5, c_6, c_7, c_8, c_9, c_10, c_11, c_12, c_13)
{
#Definición de los valores de entrada
#E_05 <- 6000  # N/mm2
#E_50 <- 9000  # N/mm2
#f_m <- 20     # N/mm2
#f_c <- 30     # N/mm2
#k_a <- 1      # -
# Espesores de las chapas de plywood [mm]
#c_1 <- 1
#c_2 <- 3
#c_3 <- 1
# Numero de capas en el plywood
#n <- 3
##Caso 1: Tres capas
if(n==3)
{
# Datos generales de 3 capas
a_3 <- c_1 + c_2 + c_3
a_1 <- c_2
mu  <- a_3/a_1
# Calculo 1: Flexion
f_g31 <- ((a_3^3)-(a_1^3))/(a_3^3)
f_g1  <- a_1^3 / a_3^3
f_w   <- f_m / E_05
f_sc3 <- k_a * E_05 * (a_3 / a_3) * f_w
f_sc1 <- k_a * E_05 * (a_1 / a_3) * f_w
f_E05pa<-E_05 * f_g31
f_E05pe<-E_05 * f_g1
f_E50pa<-E_50 * f_g31
f_E50pe<-E_50 * f_g1
f_fpa<-f_sc3 * f_g31
f_fpe<-f_sc1 * f_g1 *mu
print("Estos son los de Flexion")
print(f_E05pa)
print(f_E05pe)
print(f_E50pa)
print(f_E50pe)
#Calculo 2: Traccion
t_g31 <- (a_3 - a_1) / a_3
t_g1  <- a_1 / a_3
t_w   <- f_m / E_05
t_sc3 <- k_a * E_05 * f_w
t_sc1 <- k_a * E_05 * f_w
t_E05pa<- E_05 * t_g31
t_E05pe<- E_05 * t_g1
t_E50pa<- E_50 * t_g31
t_E50pe<- E_50 * t_g1
t_fpa  <- t_sc3 * t_g31
t_fpe  <- t_sc1 * t_g1 * mu
print("Estos son los de Traccion")
print(t_E05pa)
print(t_E05pe)
print(t_E50pa)
print(t_E50pe)
#Calculo 3: Compresion
c_g31<-function(a,b)
{((a)-(b))/(a)}
c_g1<-function(a,b)
{a/b}
c_w<-function(a,b)
{a/b}
c_sc<-function(a,b,c)
{a*b*c}
c_fpa<-function(a,b)
{a*b}
c_fpe<-function(a,b,c)
{a*b*c}
c_g31 <-(a_3 - a_1) / a_3
c_g1  <-a_1 / a_3
c_w   <-f_c / E_05
c_sc3 <-k_a * E_05 *c_w
c_sc1 <-k_a * E_05 *c_w
c_E05pa<- E_05 * c_g31
c_E05pe<- E_05 *c_g1
c_E50pa<- E_50 * c_g31
c_E50pe<- E_50 * c_g1
c_fpa  <- c_sc3 * c_g31
c_fpe  <- c_sc1 * c_g1 * mu
print("Estos son los de Compresion")
print(c_E05pa)
print(c_E05pe)
print(c_E50pa)
print(c_E50pe)
}
A <- data.frame(f_E05pa, f_E05pe, f_E50pa, f_E50pe,
t_E05pa, t_E05pe, t_E50pa, t_E50pe,
c_E05pa, c_E05pe, c_E50pa, c_E50pe)
}
A <-normaUNE(6000, 9000, 20, 30, 1, 3, 1, 3, 1,3,3,3,3)
View(A)
Funcion <- function(x)
{
N <- 1000
H_H0 <- rep(0.8,N)+rnorm(N)/100
D_Temp <- rnorm(N,mean=10,sd=1.5)
a <- x[1]
b <- x[2]
c <- x[3]
Suma <- sum(abs(H_H0-(a*(1-exp(-b*D_Temp^c)))))
return(Suma)
}
optim(c(0.75,0.03,1.60), Funcion)
library(raster)
help(raster.Options)
help(rasterOptions)
help(stack)
help(processInMemory)
library(raster)
help(overlay)
overlay
help(brick)
library(raster)
help(brick)
b <- brick(system.file("external/rlogo.grd", package="raster"))
b
t<-b[[1]]
t
stack(t,t)
brick(t,t)
brick(t,t,t,t,t,t)
brick(t,t,t,t,t,t,t,t,t,t,,t)
brick(t,t,t,t,t,t,t,t,t,t,t)
brick(t,t,t,t,t,t,t,t,t,t,t,t,t)
brick(t,t)
t<-brick(t,t)
t<-brick(t,t,t,t,t,t,t,t,t)
t<-brick(t,t)
t
brick(t,t)
r <- raster(ncol=10, nrow=10)
r
r[] <- 1
s <- stack(r, r+2, r+5)
r[] <- round((runif(ncell(r)))*3)
r
library(rasterVis)
install.packages('rastervis')
install.packages('rasterVis')
library(rasterVis)
levelplot(r)
levelplot(s)
x <- stackSelect(s, r)
x
levelplot(x)
levelplot(r)
r[[1]]
r[[1]][1:3]
s[[1]][1:3]
s[[2]][1:3]
s[[3]][1:3]
x[[1]][1:3]
help(poliroot)
help(polyroot)
1e-3
z<-matrix(,1.8083,-2.3127e-3,4.045e-6,-1.7363e-9)
z<-matrix(-1483,1.8083,-2.3127e-3,4.045e-6,-1.7363e-9)
z<-matrix(c(-1483,1.8083,-2.3127e-3,4.045e-6,-1.7363e-9),ncol=1)
polyroot(z)
z<-matrix(c(1710.68,1.8083,-2.3127e-3,4.045e-6,-1.7363e-9),ncol=1)
polyroot(z)
z<-matrix(c(-1710.68,1.8083,-2.3127e-3,4.045e-6,-1.7363e-9),ncol=1)
polyroot(z)
z<-matrix(c(1499.22,1.8083,-2.3127e-3,4.045e-6,-1.7363e-9),ncol=1)
polyroot(z)
z<-matrix(c(-1499.22,1.8083,-2.3127e-3,4.045e-6,-1.7363e-9),ncol=1)
polyroot(z)
z<-matrix(c(-1515.74,1.8083,-2.3127e-3,4.045e-6,-1.7363e-9),ncol=1)
polyroot(z)
z<-matrix(c(-1533.18,1.8083,-2.3127e-3,4.045e-6,-1.7363e-9),ncol=1)
polyroot(z)
z<-matrix(c(-1551.58,1.8083,-2.3127e-3,4.045e-6,-1.7363e-9),ncol=1)
polyroot(z)
z<-matrix(c(-1570,1.8083,-2.3127e-3,4.045e-6,-1.7363e-9),ncol=1)
z<-matrix(c(-1570.96,1.8083,-2.3127e-3,4.045e-6,-1.7363e-9),ncol=1)
polyroot(z)
z<-matrix(c(-1591.14,1.8083,-2.3127e-3,4.045e-6,-1.7363e-9),ncol=1)
polyroot(z)
z<-matrix(c(-1612.84,1.8083,-2.3127e-3,4.045e-6,-1.7363e-9),ncol=1)
polyroot(z)
z<-matrix(c(-1635.44,1.8083,-2.3127e-3,4.045e-6,-1.7363e-9),ncol=1)
polyroot(z)
z<-matrix(c(-1659.2,1.8083,-2.3127e-3,4.045e-6,-1.7363e-9),ncol=1)
polyroot(z)
z<-matrix(c(-1684.28,1.8083,-2.3127e-3,4.045e-6,-1.7363e-9),ncol=1)
polyroot(z)
z<-matrix(c(-1511.9,1.8083,-2.3127e-3,4.045e-6,-1.7363e-9),ncol=1)
polyroot(z)
z<-matrix(c(-1617.8083,-2.3127e-3,4.045e-6,-1.7363e-9),ncol=1)
polyroot(z)
z<-matrix(c(-1617,1.8083,-2.3127e-3,4.045e-6,-1.7363e-9),ncol=1)
polyroot(z)
library(raster)
help(interpolate)
## kriging
coordinates(meuse) <- ~x+y
## gstat examples
library(gstat)
data(meuse)
install.packages('gstat')
library(gstat)
data(meuse)
## kriging
coordinates(meuse) <- ~x+y
meuse
## ordinary kriging
v <- variogram(log(zinc)~1, meuse)
v
m <- fit.variogram(v, vgm(1, "Sph", 300, 1))
gOK <- gstat(NULL, "log.zinc", log(zinc)~1, meuse, model=m)
gOK
OK <- interpolate(r, gOK)
r <- raster(system.file("external/test.grd", package="raster"))
r
OK <- interpolate(r, gOK)
library(fields)
install.packages('fields')
library(fields)
r <- raster(system.file("external/test.grd", package="raster"))
ra <- aggregate(r, 10)
xy <- data.frame(xyFromCell(ra, 1:ncell(ra)))
v <- getValues(ra)
tps <- Tps(xy, v)
p <- raster(r)
p <- interpolate(p, tps)
p <- mask(p, r)
plot(p)
se <- interpolate(p, tps, fun=predict.se)
se <- mask(se, r)
plot(se)
## gstat examples
library(gstat)
data(meuse)
## inverse distance weighted (IDW)
r <- raster(system.file("external/test.grd", package="raster"))
data(meuse)
mg <- gstat(id = "zinc", formula = zinc~1, locations = ~x+y, data=meuse,
nmax=7, set=list(idp = .5))
z <- interpolate(r, mg)
z <- mask(z, r)
plot(z)
help(mask)
coordinates(meuse) <- ~x+y
projection(meuse) <- projection(r)
## ordinary kriging
v <- variogram(log(zinc)~1, meuse)
m <- fit.variogram(v, vgm(1, "Sph", 300, 1))
gOK <- gstat(NULL, "log.zinc", log(zinc)~1, meuse, model=m)
OK <- interpolate(r, gOK)
plot(OK)
vu <- variogram(log(zinc)~elev, meuse)
mu <- fit.variogram(vu, vgm(1, "Sph", 300, 1))
gUK <- gstat(NULL, "log.zinc", log(zinc)~elev, meuse, model=mu)
names(r) <- 'elev'
UK <- interpolate(r, gUK, xyOnly=FALSE)
plot(UK)
gCoK <- gstat(NULL, 'log.zinc', log(zinc)~1, meuse)
gCoK <- gstat(gCoK, 'elev', elev~1, meuse)
gCoK <- gstat(gCoK, 'cadmium', cadmium~1, meuse)
gCoK <- gstat(gCoK, 'copper', copper~1, meuse)
coV <- variogram(gCoK)
plot(coV, type='b', main='Co-variogram')
help(gstat)
gCoK <- gstat(gCoK, 'copper', copper~1, meuse)
coV <- variogram(gCoK)
plot(coV, type='b', main='Co-variogram')
coV.fit <- fit.lmc(coV, gCoK, vgm(model='Sph', range=1000))
coV.fit
plot(coV, coV.fit, main='Fitted Co-variogram')
coK <- interpolate(r, coV.fit)
plot(coK)
plot(coK)
source("http://bioconductor.org/biocLite.R")
biocLite("ChAMPdata")
source("http://bioconductor.org/biocLite.R")
biocLite("ChAMPdata")
source("http://bioconductor.org/biocLite.R")
biocLite("ChimpHumanBrainData")
source("http://bioconductor.org/biocLite.R")
biocLite()
source("http://bioconductor.org/biocLite.R")
biocLite("ChimpHumanBrainData")
biocLite()
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite("ChimpHumanBrainData")
data(champBloodCtls)
data(champBloodCtls)
data(champBloodCtls)
biocLite("ChAMPdata")
data(champBloodCtls)
data(champBloodCtls)
data(champBloodCtls)+
data(probeInfoALL.lv)
source("http://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("humanStemCell")
data(fhesc)
library("ChAMPdata", lib.loc="C:/Archivos de programa/R/R-3.1.2/library")
library("ChimpHumanBrainData", lib.loc="C:/Archivos de programa/R/R-3.1.2/library")
?solve
load("C:/Documents and Settings/rulostad/Mis documentos/Dropbox/softcomp/paper_enersol/code/_models/test2013.RData")
resultsGA
load("C:/Documents and Settings/rulostad/Mis documentos/Dropbox/softcomp/paper_enersol/database/general_normalized.Rdata")
qr?
?qr
load("C:/Documents and Settings/rulostad/Mis documentos/Dropbox/softcomp/paper_enersol/database/general_normalized.Rdata")
rm(list=ls(all=TRUE))
############################################################################################################################
#general workspace
home<-"/Users/ruurraca"
setwd(paste0(home,"/Dropbox/softcomp/paper_enersol"))
dir<-getwd()
############################################################################################################################
#load database (already cleaned and reduced)
setwd(paste(dir,"/database/",sep=""))
load("meteoReduced.RData")
rm(list=ls(all=TRUE))
############################################################################################################################
#general workspace
home<-"/Users/ruurraca"
setwd(paste0(home,"/Dropbox/softcomp/paper_enersol"))
dir<-getwd()
############################################################################################################################
#load database (already cleaned and reduced)
setwd(paste(dir,"/database/",sep=""))
load("meteoReduced.RData")
home<-"Dropbox/"
setwd(paste0(home,"/softcomp/paper_enersol"))
dir<-getwd()
############################################################################################################################
#load database (already cleaned and reduced)
setwd(paste(dir,"/database/",sep=""))
load("meteoReduced.RData")
sapply(nrow, meteo)
sapply(meteo, nrow)
unique(meteo[[1]])
unique(meteo[[1]]$year)
names(meteo[[1]])
unique(meteo[[1]]$Year)
load("C:/Documents and Settings/rulostad/Mis documentos/Dropbox/softcomp/paper_enersol/database/general_normalized.Rdata")
ranges.train
32.87-3.03
rm(list=ls(all=TRUE))
############################################################################################################################
#general workspace
home<-"/Users/ruurraca"
setwd(paste0(home,"/Dropbox/softcomp/paper_enersol"))
dir<-getwd()
home<-"/Desktop"
home<-"/Dropbox"
setwd(paste0(home,"/softcomp/paper_enersol"))
setwd(paste0(home,"/softcomp/paper_enersol"))
home<-"/Dropbox"
setwd(paste0(home,"/softcomp/paper_enersol"))
paste0(home,"/softcomp/paper_enersol")
setwd(paste0(home,"/softcomp/paper_enersol"))
setwd("/Dropbox")
load("meteoReduced.RData")
sapply(meteo, nrow)
unqiue(meteo[[1]]$Year)
unique(meteo[[1]]$Year)
