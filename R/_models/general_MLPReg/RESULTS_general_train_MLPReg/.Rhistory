lines(Cargas,Test2,col="blue")
par(new=TRUE)
vertical<-seq(-3,0,0.5)
?xaxt
plot(Cargas,Test1, type="l", col="red" pch=5, col=2, xlab="",ylab="",cex=0.7)
lines(Cargas,Test2,col="blue")
lines(Cargas, J3003, col="green")
legend("topright",c("Test1","Test2","J3003"),lty=1,col=c(2:4),cex=0.7)
title(main="Displacements",xlab="Charges",ylab="Displacements",cex=0.7)
horizontal<-seq(0,50,5)
vertical<-seq(-3,0,0.5)
plot(Cargas,Test1, type="l", col="red", ,xaxt="n",yaxt="n",ann=FALSE, xlab="",ylab="",cex=0.7)
axis(side = 1, at=horizontal)
axis(side = 2, at=vertical,las=1)
mtext(side = 1, text = "Charges", line = 3)
mtext(side = 2, text = "Displacements", line = 5)
lines(Cargas,Test2,col="blue")
#creamos dos vectores con nuestros ticks
horizontal<-seq(0,50,5)
vertical<-seq(-3,0,0.5)
plot(Cargas,Test1, type="l", col="red", ,xaxt="n",yaxt="n",ann=FALSE, xlab="",ylab="",cex=0.7, main="Displacements")
axis(side = 1, at=horizontal)
axis(side = 2, at=vertical,las=1)
mtext(side = 1, text = "Charges", line = 3)
mtext(side = 2, text = "Displacements", line = 5)
lines(Cargas,Test2,col="blue")
lines(Cargas, J3003, col="green")
abline( h=vertical,v=horizontal, col="#E0E0E0", lwd=1)
legend("topright",c("Test1","Test2","J3003"),lty=1,col=c(2:4),cex=0.7)
62/2.5
63/2.5
d<-69.3
37/60
t<-3.62
d/t
34çç760
t<-3+34/60
d/t
1900*14
axis
?las
?axis
140/300
60/160
150/380
100/250
130/300
55/147
33/124
30*9
/8
270/8
9*30
20*30
48.5-23.5
75/0.785
75/0.885
50/1.75
5/60
5/60+2
0/2.0833333
50/2.0833333
citation("stats")
install.packages("gstat")
install.packages("gstat")
install.packages("rgeos")
install.packages("xts")
install.packages("intervals")
install.packages("sp")
library(rgeos)
install.packages("geos")
install.packages("geos-devel")
install.packages(rgdal,type="source")
install.packages(geos,type="source")
library(rgdal)
install.packages("gstat")
library(gstat)
?varigram
?variogram
load("/Users/ruurraca/Dropbox/softcomp/paper_mapping/tutorial kriging/Stations.RData")
install.packages('rasterVis')
library(raster)
library(rasterVis)
library(gstat)
library(sp)
setwd('/Users/feantona/Dropbox/softcomp/paper_mapping/tutorial kriging')
UTM <- SpatialPointsDataFrame(Stations[,c(2,3)], Stations[,-c(2,3)],
proj4string=CRS('+proj=utm +zone=30 +ellps=WGS84'))
# hacemos el variograma
vgm_ok <- variogram(GHImed~1, UTM)
plot(vgm_ok)
# ajustamos con un modelo Nugget ya que los puntos parece que no tienen una distribución espacial y no cambian con
# la distancia. Para ver otros ejemplos de variograma ver mi articulo Antonanzas-Torres.Cañizares.ea2013
fitvgm_ok <- fit.variogram(vgm_ok, vgm(12000, "Sph", 20000, nugget= 5000))
plot(vgm_ok, model=fitvgm_ok, as.table=TRUE)
gModel_ok <- gstat(NULL, id='G0yKrig_ok',
formula= GHImed ~ 1,
locations=UTM, model=fitvgm_ok)
# cargamos un área sobre la queramos hacer el mapa y le asigno de valor cero
GHI2005a<-raster('GHI2005a')
# interpolamos
G0yKrig_ok <- interpolate(GHI2005a, gModel_ok, xyOnly=FALSE)
# representamos nuestro mapa
levelplot(G0yKrig_ok)
GHI2005a<-raster('GHI2005a')
install.packages("rgdal")
library(rgdal)
GHI2005a<-raster('GHI2005a')
gModel_ok <- gstat(NULL, id='G0yKrig_ok',
formula= GHImed ~ 1,
locations=UTM, model=fitvgm_ok)
# cargamos un área sobre la queramos hacer el mapa y le asigno de valor cero
GHI2005a<-raster('GHI2005a')
class(UTM)
a<-1:10
class(a)
class(a)
attributes(a)
attributes(UTM)
cube <- function(x, n) {
x^3
}
cube(3)
library(datasets)
data(iris)
?iris
tapply(iris$Sepal.Lenght, iris$Species, mean)
dim(iris)
colnames(iris)
length(iris$Sepal.Lenght)
iris$Sepal.Lenght
summary(iris)
iris[1.]
iris[1,]
iris[,1]
colnames(iris)[1]
iris$Sepal.Length
tapply(iris$Sepal.Length, iris$Species, mean)
library(datasets)
load(mtcars)
library(datasets)
load(mtcars)
?mtcars
mtcars
summary(mtcars)
with(mtcars, apply(mpg, cyl, mean))
sapply(mtcars, cyl, mean)
lapply(mtcars, mean)
mean(mtcars$mpg, mtcars$cyl)
length(mtcars$mpg)
length(mtcars$cyl)
mean(mtcars$mpg, mtcars$cyl)
?mean
with(mtcars, apply(mpg, cyl, mean))
with(mtcars, tapply(mpg, cyl, mean))
View(fitvgm_ok)
summary(mtcars)
tapply(mtcars$hp, mtcars$cyl, mean)
a<-tapply(mtcars$hp, mtcars$cyl, mean)
a
a$4-a$8
a[1]-a[3]
abs(a[1]-a[3])
debug(ls)
debug(ls)
?debug
ls
str(c)
str(variogram)
str(mean)
str(sd)
str(vector)
install.packages("parallel")
library(parallel)
library("parallel", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
?mclapply
??mclapply
mclapply
mclapply()
deattach(parallel)
??deatach
detach(parallel)
detach(package;parallel)
detach(package:parallel)
ls
a
a
b
library(rJava)
library(RWeka)
WPM("install-package","multiLayerPerceptrons")
WPM("package-info","installed","multiLayerPerceptrons")
library(e1071)
library(elmNN)
rm(list=ls(all=TRUE))
############################################################################################################################
#general workspace
home<-"/Users/ruurraca"
setwd(paste0(home,"/Dropbox/softcomp/paper_enersol/"))
dir<-getwd()
############################################################################################################################
tipo<-"general"
#load the training database. Load the ranges in order to de-normalize the results.
setwd(paste0(dir,"/database/"))
load(paste0(tipo,"_normalized.RData"))
range.total<-(ranges.train[2,14]-ranges.train[1,14])
###########################################################################################################################
#EXTRACT THE PARAMETERS OF THE GENERAL MODELS
############################################################################################################################
#create results dataframes
resultsGA<-list()
modelo<-c("SVM", "LINEAR", "M5P", "ELM", "MLPReg");
sep<-c(",",",",";",",",",")
for (i in 1:length(modelo)){
#extract the paramters and inputs chosen (best individual & last generation)
setwd(paste0(dir,"/code/_models/",tipo,"_",modelo[[i]],"/RESULTS_",tipo,"_train_",modelo[[i]]))
data<-read.csv2(file="gen_FINAL.csv", sep=sep[i], dec=".")
#best individual (first row). Obtain parameters.
best<-data[nrow(data),]
resultsGA[[i]]<-best[-c(1,2,4,5)]
#
resultsGA[[i]]$Cost1<-resultsGA[[i]]$Cost1*(ranges.train[2,14]-ranges.train[1,14])
resultsGA[[i]]$CostTest<-resultsGA[[i]]$CostTest*(ranges.train[2,14]-ranges.train[1,14])
names(resultsGA)[i]<-modelo[[i]]
}
######################################################################################
#save GA resulst
setwd(paste(dir,"/code/",sep=""))
save(resultsGA, file="resultsGAgeneral.Rdata")
predictions<-as.data.frame(matrix(0,ncol=7,nrow=nrow(meteo.test)))
colnames(predictions)<-c("SVM","M5P", "ELM", "MLPreg", "real", "station", "clear")
reals<-predictions
DATATRAIN<-meteo.train; DATATEST<-meteo.test
################ SVM
inputs<-resultsGA$SVM[which(names(resultsGA$SVM)=="TempMed"):which(names(resultsGA$SVM)=="M_mas1")]
model<-svm(x=DATATRAIN[,which(inputs==1)], y=DATATRAIN[,14], kernel="radial", gamma=resultsGA$SVM$Gamma, cost=10^(resultsGA$SVM$LogCost), epsilon=resultsGA$SVM$Epsilon)
predtest<-predict(model, newdata=DATATEST[,which(inputs==1)])
predictions$SVM<-(predtest*range.total)+ranges.train[1,14]
################ LINEAR
#inputs<-resultsGA$LINEAR[which(names(resultsGA$LINEAR)=="TempMed"):which(names(resultsGA$LINEAR)=="M_mas1")]
#model<-LinearRegression(as.formula(paste("Rad", paste(names(inputs)[inputs==1], collapse=" + "), sep=" ~ ")),
#			data=DATATRAIN, control=Weka_control(S=1,C=TRUE, R=resultsGA$LINEAR$Ridge))
#predtest<-predict(model, newdata=DATATEST[,which(inputs==1)])
#predictions$LINEAR<-(predtest*range.total)+ranges.train[1,14]
################ M5P
inputs<-resultsGA$M5P[which(names(resultsGA$M5P)=="TempMed"):which(names(resultsGA$M5P)=="M_mas1")]
model<-M5P(as.formula(paste("Rad", paste(names(inputs)[inputs==1], collapse=" + "), sep=" ~ ")),
data=DATATRAIN,control=Weka_control(M=as.numeric(resultsGA$M5P$M_par)))
predtest<-predict(model, newdata=DATATEST[,which(inputs==1)])
predictions$M5P<-(predtest*range.total)+ranges.train[1,14]
################ ELM
inputs<-resultsGA$ELM[which(names(resultsGA$ELM)=="TempMed"):which(names(resultsGA$ELM)=="M_mas1")]
model<-elmtrain(x=DATATRAIN[,which(inputs==1)], y=DATATRAIN[,14], nhid<-resultsGA$ELM$N, actfun="sig", C=resultsGA$ELM$Cost)
predtest<-as.numeric(predict(model, newdata=DATATEST[,which(inputs==1)]))
predictions$ELM<-(predtest*range.total)+ranges.train[1,14]
################ MLP
inputs<-resultsGA$MLPReg[which(names(resultsGA$MLPReg)=="TempMed"):which(names(resultsGA$MLPReg)=="M_mas1")]
MLPREG <- make_Weka_classifier("weka.classifiers.functions.MLPRegressor");
model<-MLPREG(as.formula(paste("Rad", paste(names(inputs)[inputs==1], collapse=" + "), sep=" ~ ")),
data=DATATRAIN, control=Weka_control(N=resultsGA$MLPReg$Neurons,R=resultsGA$MLPReg$Ridge))
predtest<-as.numeric(predict(model, newdata=DATATEST[,which(inputs==1)]))
predictions$MLPreg<-(predtest*range.total)+ranges.train[1,14]
################ real (measured radiation de-normalized)
predictions$real<-(DATATEST[,14]*range.total)+ranges.train[1,14]
################ station (we add a last column to identify to which station belongs each radiation value)
predictions$station<-st_test
################ clear (0-cloudy day, 1-clear day)
predictions$clear<-clear_test
summary(predictions)
predictions.clear<-predictions[which(predictions$clear==1),]
predictions.clear<-predictions[which(predictions$clear==0),]
predictions.clear<-predictions[which(predictions$clear==1),]
predictions.clear<-predictions[which(predictions$clear==0),]
for(i in 1:4){
#error per station
for(j in 1:4){
clear[j,i]<-MAE(predictions.clear[which(predictions.clear$station==j),i], predictions.clear$real[which(predictions.clear$station==j)])
cloud[j,i]<-MAE(predictions.cloud[which(predictions.cloud$station==j),i], predictions.cloud$real[which(predictions.cloud$station==j)])
}
#error in all stations together
clear[5,i]<-MAE(predictions.clear[,i], predictions.clear$real)
cloud[5,i]<-MAE(predictions.cloud[,i], predictions.cloud$real)
}
MAE<-function(pred, real){mean(abs(pred-real))}
predictions.clear<-predictions[which(predictions$clear==1),]
predictions.clear<-predictions[which(predictions$clear==0),]
for(i in 1:4){
#error per station
for(j in 1:4){
clear[j,i]<-MAE(predictions.clear[which(predictions.clear$station==j),i], predictions.clear$real[which(predictions.clear$station==j)])
cloud[j,i]<-MAE(predictions.cloud[which(predictions.cloud$station==j),i], predictions.cloud$real[which(predictions.cloud$station==j)])
}
#error in all stations together
clear[5,i]<-MAE(predictions.clear[,i], predictions.clear$real)
cloud[5,i]<-MAE(predictions.cloud[,i], predictions.cloud$real)
}
functions
clear<-as.data.frame(matrix(0,ncol=4,nrow=5))
rownames(clear)<-c("Cordoba","Jaen","Puebla", "Nijar","mean")
colnames(clear)<-c("SVM","M5P", "ELM","MLPreg")
cloud<-clear;
predictions.clear<-predictions[which(predictions$clear==1),]
predictions.clear<-predictions[which(predictions$clear==0),]
for(i in 1:4){
#error per station
for(j in 1:4){
clear[j,i]<-MAE(predictions.clear[which(predictions.clear$station==j),i], predictions.clear$real[which(predictions.clear$station==j)])
cloud[j,i]<-MAE(predictions.cloud[which(predictions.cloud$station==j),i], predictions.cloud$real[which(predictions.cloud$station==j)])
}
#error in all stations together
clear[5,i]<-MAE(predictions.clear[,i], predictions.clear$real)
cloud[5,i]<-MAE(predictions.cloud[,i], predictions.cloud$real)
}
clear<-as.data.frame(matrix(0,ncol=4,nrow=5))
rownames(clear)<-c("Cordoba","Jaen","Puebla", "Nijar","mean")
colnames(clear)<-c("SVM","M5P", "ELM","MLPreg")
cloud<-clear;
predictions.clear<-predictions[which(predictions$clear==1),]
predictions.cloud<-predictions[which(predictions$clear==0),]
for(i in 1:4){
#error per station
for(j in 1:4){
clear[j,i]<-MAE(predictions.clear[which(predictions.clear$station==j),i], predictions.clear$real[which(predictions.clear$station==j)])
cloud[j,i]<-MAE(predictions.cloud[which(predictions.cloud$station==j),i], predictions.cloud$real[which(predictions.cloud$station==j)])
}
#error in all stations together
clear[5,i]<-MAE(predictions.clear[,i], predictions.clear$real)
cloud[5,i]<-MAE(predictions.cloud[,i], predictions.cloud$real)
}
clear
cloud
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
############################################################################################################################
#general workspace
home<-"/Users/ruurraca"
setwd(paste0(home,"/Dropbox/softcomp/paper_enersol/"))
dir<-getwd()
############################################################################################################################
tipo<-"general"
#load the training database. Load the ranges in order to de-normalize the results.
setwd(paste0(dir,"/database/"))
load(paste0(tipo,"_normalized.RData"))
range.total<-(ranges.train[2,14]-ranges.train[1,14])
library(lattice)
library(latticeExtra)
library(rasterVis)
library(grid)
colnames(predictions)
?WPM
predictions<-as.data.frame(matrix(0,ncol=7,nrow=nrow(meteo.test)))
colnames(predictions)<-c("SVM","M5P", "ELM", "MLPreg", "real", "station", "clear")
reals<-predictions
DATATRAIN<-meteo.train; DATATEST<-meteo.test
################ SVM
inputs<-resultsGA$SVM[which(names(resultsGA$SVM)=="TempMed"):which(names(resultsGA$SVM)=="M_mas1")]
model<-svm(x=DATATRAIN[,which(inputs==1)], y=DATATRAIN[,14], kernel="radial", gamma=resultsGA$SVM$Gamma, cost=10^(resultsGA$SVM$LogCost), epsilon=resultsGA$SVM$Epsilon)
predtest<-predict(model, newdata=DATATEST[,which(inputs==1)])
predictions$SVM<-(predtest*range.total)+ranges.train[1,14]
################ LINEAR
#inputs<-resultsGA$LINEAR[which(names(resultsGA$LINEAR)=="TempMed"):which(names(resultsGA$LINEAR)=="M_mas1")]
#model<-LinearRegression(as.formula(paste("Rad", paste(names(inputs)[inputs==1], collapse=" + "), sep=" ~ ")),
#			data=DATATRAIN, control=Weka_control(S=1,C=TRUE, R=resultsGA$LINEAR$Ridge))
#predtest<-predict(model, newdata=DATATEST[,which(inputs==1)])
#predictions$LINEAR<-(predtest*range.total)+ranges.train[1,14]
################ M5P
inputs<-resultsGA$M5P[which(names(resultsGA$M5P)=="TempMed"):which(names(resultsGA$M5P)=="M_mas1")]
model<-M5P(as.formula(paste("Rad", paste(names(inputs)[inputs==1], collapse=" + "), sep=" ~ ")),
data=DATATRAIN,control=Weka_control(M=as.numeric(resultsGA$M5P$M_par)))
predtest<-predict(model, newdata=DATATEST[,which(inputs==1)])
predictions$M5P<-(predtest*range.total)+ranges.train[1,14]
################ ELM
inputs<-resultsGA$ELM[which(names(resultsGA$ELM)=="TempMed"):which(names(resultsGA$ELM)=="M_mas1")]
model<-elmtrain(x=DATATRAIN[,which(inputs==1)], y=DATATRAIN[,14], nhid<-resultsGA$ELM$N, actfun="sig", C=resultsGA$ELM$Cost)
predtest<-as.numeric(predict(model, newdata=DATATEST[,which(inputs==1)]))
predictions$ELM<-(predtest*range.total)+ranges.train[1,14]
################ MLP
inputs<-resultsGA$MLPReg[which(names(resultsGA$MLPReg)=="TempMed"):which(names(resultsGA$MLPReg)=="M_mas1")]
MLPREG <- make_Weka_classifier("weka.classifiers.functions.MLPRegressor");
model<-MLPREG(as.formula(paste("Rad", paste(names(inputs)[inputs==1], collapse=" + "), sep=" ~ ")),
data=DATATRAIN, control=Weka_control(N=resultsGA$MLPReg$Neurons,R=resultsGA$MLPReg$Ridge))
predtest<-as.numeric(predict(model, newdata=DATATEST[,which(inputs==1)]))
predictions$MLPreg<-(predtest*range.total)+ranges.train[1,14]
################ real (measured radiation de-normalized)
predictions$real<-(DATATEST[,14]*range.total)+ranges.train[1,14]
################ station (we add a last column to identify to which station belongs each radiation value)
predictions$station<-st_test
################ clear (0-cloudy day, 1-clear day)
clear_test<-rep(0, nrow(predictions))
clear_test[which(clearIndex_test)>0.7]<-1
predictions$clear<-clear_test
predictions<-as.data.frame(matrix(0,ncol=7,nrow=nrow(meteo.test)))
colnames(predictions)<-c("SVM","M5P", "ELM", "MLPreg", "real", "station", "clear")
reals<-predictions
DATATRAIN<-meteo.train; DATATEST<-meteo.test
################ SVM
inputs<-resultsGA$SVM[which(names(resultsGA$SVM)=="TempMed"):which(names(resultsGA$SVM)=="M_mas1")]
model<-svm(x=DATATRAIN[,which(inputs==1)], y=DATATRAIN[,14], kernel="radial", gamma=resultsGA$SVM$Gamma, cost=10^(resultsGA$SVM$LogCost), epsilon=resultsGA$SVM$Epsilon)
predtest<-predict(model, newdata=DATATEST[,which(inputs==1)])
predictions$SVM<-(predtest*range.total)+ranges.train[1,14]
################ LINEAR
#inputs<-resultsGA$LINEAR[which(names(resultsGA$LINEAR)=="TempMed"):which(names(resultsGA$LINEAR)=="M_mas1")]
#model<-LinearRegression(as.formula(paste("Rad", paste(names(inputs)[inputs==1], collapse=" + "), sep=" ~ ")),
#			data=DATATRAIN, control=Weka_control(S=1,C=TRUE, R=resultsGA$LINEAR$Ridge))
#predtest<-predict(model, newdata=DATATEST[,which(inputs==1)])
#predictions$LINEAR<-(predtest*range.total)+ranges.train[1,14]
################ M5P
inputs<-resultsGA$M5P[which(names(resultsGA$M5P)=="TempMed"):which(names(resultsGA$M5P)=="M_mas1")]
model<-M5P(as.formula(paste("Rad", paste(names(inputs)[inputs==1], collapse=" + "), sep=" ~ ")),
data=DATATRAIN,control=Weka_control(M=as.numeric(resultsGA$M5P$M_par)))
predtest<-predict(model, newdata=DATATEST[,which(inputs==1)])
predictions$M5P<-(predtest*range.total)+ranges.train[1,14]
################ ELM
inputs<-resultsGA$ELM[which(names(resultsGA$ELM)=="TempMed"):which(names(resultsGA$ELM)=="M_mas1")]
model<-elmtrain(x=DATATRAIN[,which(inputs==1)], y=DATATRAIN[,14], nhid<-resultsGA$ELM$N, actfun="sig", C=resultsGA$ELM$Cost)
predtest<-as.numeric(predict(model, newdata=DATATEST[,which(inputs==1)]))
predictions$ELM<-(predtest*range.total)+ranges.train[1,14]
################ MLP
inputs<-resultsGA$MLPReg[which(names(resultsGA$MLPReg)=="TempMed"):which(names(resultsGA$MLPReg)=="M_mas1")]
MLPREG <- make_Weka_classifier("weka.classifiers.functions.MLPRegressor");
model<-MLPREG(as.formula(paste("Rad", paste(names(inputs)[inputs==1], collapse=" + "), sep=" ~ ")),
data=DATATRAIN, control=Weka_control(N=resultsGA$MLPReg$Neurons,R=resultsGA$MLPReg$Ridge))
predtest<-as.numeric(predict(model, newdata=DATATEST[,which(inputs==1)]))
predictions$MLPreg<-(predtest*range.total)+ranges.train[1,14]
################ real (measured radiation de-normalized)
predictions$real<-(DATATEST[,14]*range.total)+ranges.train[1,14]
################ station (we add a last column to identify to which station belongs each radiation value)
predictions$station<-st_test
################ clear (0-cloudy day, 1-clear day)
clear_test<-rep(0, nrow(predictions))
clear_test[which(clearIndex_test>0.7)]<-1
predictions$clear<-clear_test
save(predictions, file="pred2013.RData")
predictions<-as.data.frame(matrix(0,ncol=7,nrow=nrow(meteo.test)))
colnames(predictions)<-c("SVM","M5P", "ELM", "MLPreg", "real", "station", "clear")
reals<-predictions
DATATRAIN<-meteo.train; DATATEST<-meteo.test
################ SVM
inputs<-resultsGA$SVM[which(names(resultsGA$SVM)=="TempMed"):which(names(resultsGA$SVM)=="M_mas1")]
model<-svm(x=DATATRAIN[,which(inputs==1)], y=DATATRAIN[,14], kernel="radial", gamma=resultsGA$SVM$Gamma, cost=10^(resultsGA$SVM$LogCost), epsilon=resultsGA$SVM$Epsilon)
#general workspace
home<-"/Users/ruurraca"
setwd(paste0(home,"/Dropbox/softcomp/paper_enersol/"))
dir<-getwd()
############################################################################################################################
tipo<-"general"
#load the training database. Load the ranges in order to de-normalize the results.
setwd(paste0(dir,"/database/"))
load(paste0(tipo,"_normalized.RData"))
range.total<-(ranges.train[2,14]-ranges.train[1,14])
###########################################################################################################################
#EXTRACT THE PARAMETERS OF THE GENERAL MODELS
############################################################################################################################
#create results dataframes
resultsGA<-list()
modelo<-c("SVM", "LINEAR", "M5P", "ELM", "MLPReg");
sep<-c(",",",",";",",",",")
for (i in 1:length(modelo)){
#extract the paramters and inputs chosen (best individual & last generation)
setwd(paste0(dir,"/code/_models/",tipo,"_",modelo[[i]],"/RESULTS_",tipo,"_train_",modelo[[i]]))
data<-read.csv2(file="gen_FINAL.csv", sep=sep[i], dec=".")
#best individual (first row). Obtain parameters.
best<-data[nrow(data),]
resultsGA[[i]]<-best[-c(1,2,4,5)]
#
resultsGA[[i]]$Cost1<-resultsGA[[i]]$Cost1*(ranges.train[2,14]-ranges.train[1,14])
resultsGA[[i]]$CostTest<-resultsGA[[i]]$CostTest*(ranges.train[2,14]-ranges.train[1,14])
names(resultsGA)[i]<-modelo[[i]]
}
predictions<-as.data.frame(matrix(0,ncol=7,nrow=nrow(meteo.test)))
colnames(predictions)<-c("SVM","M5P", "ELM", "MLPreg", "real", "station", "clear")
reals<-predictions
DATATRAIN<-meteo.train; DATATEST<-meteo.test
################ SVM
inputs<-resultsGA$SVM[which(names(resultsGA$SVM)=="TempMed"):which(names(resultsGA$SVM)=="M_mas1")]
model<-svm(x=DATATRAIN[,which(inputs==1)], y=DATATRAIN[,14], kernel="radial", gamma=resultsGA$SVM$Gamma, cost=10^(resultsGA$SVM$LogCost), epsilon=resultsGA$SVM$Epsilon)
predtest<-predict(model, newdata=DATATEST[,which(inputs==1)])
predictions$SVM<-(predtest*range.total)+ranges.train[1,14]
################ LINEAR
#inputs<-resultsGA$LINEAR[which(names(resultsGA$LINEAR)=="TempMed"):which(names(resultsGA$LINEAR)=="M_mas1")]
#model<-LinearRegression(as.formula(paste("Rad", paste(names(inputs)[inputs==1], collapse=" + "), sep=" ~ ")),
#			data=DATATRAIN, control=Weka_control(S=1,C=TRUE, R=resultsGA$LINEAR$Ridge))
#predtest<-predict(model, newdata=DATATEST[,which(inputs==1)])
#predictions$LINEAR<-(predtest*range.total)+ranges.train[1,14]
################ M5P
inputs<-resultsGA$M5P[which(names(resultsGA$M5P)=="TempMed"):which(names(resultsGA$M5P)=="M_mas1")]
model<-M5P(as.formula(paste("Rad", paste(names(inputs)[inputs==1], collapse=" + "), sep=" ~ ")),
data=DATATRAIN,control=Weka_control(M=as.numeric(resultsGA$M5P$M_par)))
predtest<-predict(model, newdata=DATATEST[,which(inputs==1)])
predictions$M5P<-(predtest*range.total)+ranges.train[1,14]
################ ELM
inputs<-resultsGA$ELM[which(names(resultsGA$ELM)=="TempMed"):which(names(resultsGA$ELM)=="M_mas1")]
model<-elmtrain(x=DATATRAIN[,which(inputs==1)], y=DATATRAIN[,14], nhid<-resultsGA$ELM$N, actfun="sig", C=resultsGA$ELM$Cost)
predtest<-as.numeric(predict(model, newdata=DATATEST[,which(inputs==1)]))
predictions$ELM<-(predtest*range.total)+ranges.train[1,14]
################ MLP
inputs<-resultsGA$MLPReg[which(names(resultsGA$MLPReg)=="TempMed"):which(names(resultsGA$MLPReg)=="M_mas1")]
MLPREG <- make_Weka_classifier("weka.classifiers.functions.MLPRegressor");
model<-MLPREG(as.formula(paste("Rad", paste(names(inputs)[inputs==1], collapse=" + "), sep=" ~ ")),
data=DATATRAIN, control=Weka_control(N=resultsGA$MLPReg$Neurons,R=resultsGA$MLPReg$Ridge))
predtest<-as.numeric(predict(model, newdata=DATATEST[,which(inputs==1)]))
predictions$MLPreg<-(predtest*range.total)+ranges.train[1,14]
################ real (measured radiation de-normalized)
predictions$real<-(DATATEST[,14]*range.total)+ranges.train[1,14]
################ station (we add a last column to identify to which station belongs each radiation value)
predictions$station<-st_test
################ clear (0-cloudy day, 1-clear day)
clear_test<-rep(0, nrow(predictions))
clear_test[which(clearIndex_test>0.7)]<-1
predictions$clear<-clear_test
save(predictions, file="pred2013.RData")
summary(predictions)
